// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cart/client/modules/disbursal/response/BasedOn.proto

package cart.client.modules.disbursal.response;

/**
 * Protobuf enum {@code cart.client.modules.disbursal.response.BasedOn}
 */
public enum BasedOn
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>exchange = 0;</code>
   */
  exchange(0),
  /**
   * <code>none = 1;</code>
   */
  none(1),
  /**
   * <code>pbo = 2;</code>
   */
  pbo(2),
  /**
   * <code>bank = 3;</code>
   */
  bank(3),
  /**
   * <code>wallet = 4;</code>
   */
  wallet(4),
  /**
   * <code>nbfc = 5;</code>
   */
  nbfc(5),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>exchange = 0;</code>
   */
  public static final int exchange_VALUE = 0;
  /**
   * <code>none = 1;</code>
   */
  public static final int none_VALUE = 1;
  /**
   * <code>pbo = 2;</code>
   */
  public static final int pbo_VALUE = 2;
  /**
   * <code>bank = 3;</code>
   */
  public static final int bank_VALUE = 3;
  /**
   * <code>wallet = 4;</code>
   */
  public static final int wallet_VALUE = 4;
  /**
   * <code>nbfc = 5;</code>
   */
  public static final int nbfc_VALUE = 5;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static BasedOn valueOf(int value) {
    return forNumber(value);
  }

  public static BasedOn forNumber(int value) {
    switch (value) {
      case 0: return exchange;
      case 1: return none;
      case 2: return pbo;
      case 3: return bank;
      case 4: return wallet;
      case 5: return nbfc;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<BasedOn>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      BasedOn> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<BasedOn>() {
          public BasedOn findValueByNumber(int number) {
            return BasedOn.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return cart.client.modules.disbursal.response.BasedOnOuterClass.getDescriptor().getEnumTypes().get(0);
  }

  private static final BasedOn[] VALUES = values();

  public static BasedOn valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private BasedOn(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:cart.client.modules.disbursal.response.BasedOn)
}

